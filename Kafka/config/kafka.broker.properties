# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# This configuration file is intended for use in KRaft mode, where
# Apache ZooKeeper is not present.  See config/kraft/README.md for details.
#

############################# Server Basics #############################

# The role of this server. Setting this puts us in KRaft mode
process.roles=__process.roles__

# The node id associated with this instance's roles
node.id=__node.id__

# The connect string for the controller quorum
controller.quorum.voters=__controller.quorum.voters__

# The maximum size of message that the broker will accept
message.max.bytes=1048588

############################# Socket Server Settings #############################

# The address the socket server listens on. If not configured, the host name will be equal to the value of
# java.net.InetAddress.getCanonicalHostName(), with PLAINTEXT listener name, and port 9092.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
# listeners is what the broker will use to create server sockets.
listeners=__listeners__
#security.inter.broker.protocol=__security.inter.broker.protocol__
# Name of listener used for communication between brokers.
# It is an error to set this and security.inter.broker.protocol properties at the same time.
inter.broker.listener.name=__inter.broker.listener.name__


# Listener name, hostname and port the broker will advertise to clients.
# If not set, it uses the value for "listeners".
# advertised.listeners is what clients will use to connect to the brokers.
advertised.listeners=__advertised.listeners__

# A comma-separated list of the names of the listeners used by the controller.
# This is required if running in KRaft mode. On a node with `process.roles=broker`, only the first listed listener will be used by the broker.
controller.listener.names=__controller.listener.names__

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
listener.security.protocol.map=__listener.security.protocol.map__

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
num.network.threads=3

# The number of threads that the server uses for processing requests, which may include disk I/O
num.io.threads=8

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600

# The length of time in milliseconds between broker heartbeats. Used when running in KRaft mode.
broker.heartbeat.interval.ms=__broker.heartbeat.interval.ms__

############################# Log Basics #############################

# A comma separated list of directories under which to store log files
log.dirs=__log.dirs__
metadata.log.dir=__metadata.log.dir__
metadata.log.max.record.bytes.between.snapshots=__metadata.log.max.record.bytes.between.snapshots__

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions=__num.partitions__
default.replication.factor=__default.replication.factor__
min.insync.replicas=__min.insync.replicas__

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=1

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended to ensure availability such as 3.
offsets.topic.replication.factor=1
transaction.state.log.replication.factor=1
transaction.state.log.min.isr=1

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours=__log.retention.hours__

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
log.retention.bytes=__log.retention.bytes__

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=__log.segment.bytes__

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

############################# Topics #############################

# Enable gzip compression on the __consumer-offsets topic everywhere
# 0=no_compression, 1=gzip, 2=snappy, 3=lz4, 4=zstd
offsets.topic.compression.codec=1

# Enable auto creation of topic on the server. Defaults to true.
auto.create.topics.enable=__auto.create.topics.enable__
auto.leader.rebalance.enable=__auto.leader.rebalance.enable__

# Enables delete topic. Delete topic through the admin tool will have no effect if this config is turned off.
# Defaults to false.
delete.topic.enable=__delete.topic.enable__

############################# Security #############################

ssl.truststore.location=__ssl.truststore.location__
ssl.truststore.password=__ssl.truststore.password__
ssl.keystore.location=__ssl.keystore.location__
ssl.keystore.password=__ssl.keystore.password__
ssl.key.password=__ssl.key.password__
ssl.client.auth=required
ssl.protocol=TLSv1.2
authorizer.class.name=org.apache.kafka.metadata.authorizer.StandardAuthorizer
super.users=User:controller@aashayein;User:clusteradmin@aashayein

allow.everyone.if.no.acl.found=false

############################# SSL LISTENERS #############################
 listener.name.internal.ssl.principal.mapping.rules= \
         RULE:^CN=([a-zA-Z0-9.]*).*,OU=(.*?),O=(.*?)$/$1@$2/L ,\
         DEFAULT

 listener.name.broker.ssl.principal.mapping.rules= \
         RULE:^CN=([a-zA-Z0-9.]*).*,OU=(.*?),O=(.*?)$/$1@$2/L ,\
         DEFAULT

 listener.name.kafka.ssl.principal.mapping.rules= \
         RULE:^CN=([a-zA-Z0-9.]*).*,OU=(.*?),O=(.*?)$/$1@$2/L ,\
         DEFAULT


# broker.rack=
# log.message.timestamp.type=LogAppendTime/CreateTime